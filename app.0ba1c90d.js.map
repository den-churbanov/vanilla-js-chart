{"version":3,"sources":["data.js","utils.js","tooltip.js","slider.js","chart.js","app.js"],"names":["getChartData","columns","types","y0","y1","x","names","colors","computeYRatio","height","max","min","computeXRatio","width","length","toDate","timestamp","withDay","shortMonths","date","Date","shortDays","getDay","getMonth","getDate","isOver","mouse","dWidth","Math","console","log","abs","line","ctx","coords","color","beginPath","lineWidth","strokeStyle","y","lineTo","stroke","closePath","circle","radius","fillStyle","arc","PI","fill","boundaries","forEach","col","i","toCoords","xRatio","yRatio","DPI_HEIGHT","PADDING","yMin","map","floor","filter","_","css","el","styles","Object","assign","style","module","exports","template","data","title","items","item","value","name","join","tooltip","show","left","top","innerHTML","getBoundingClientRect","display","insertAdjacentHTML","hide","noop","HEIGHT","sliderChart","root","WIDTH","canvas","querySelector","getContext","DPI_WIDTH","MIN_WIDTH","nextFn","$left","$window","$right","next","getPosition","setPosition","right","w","parseInt","addEventListener","mouseDown","e","type","target","dataset","dimensions","startX","pageX","document","onmousemove","delta","mouseUp","yMax","yData","idx","subscribe","fn","VIEW_HEIGHT","VIEW_WIDTH","ROWS_COUNT","CIRCLE_RADIUS","chart","raf","tip","slider","proxy","Proxy","set","result","Reflect","requestAnimationFrame","paint","clearRect","leftIndex","round","pos","rightIndex","res","slice","unshift","xData","yAxis","step","textStep","font","text","fillText","toString","moveTo","xAxis","colsCount","save","restore","mouseMove","clientX","clientY","mouseLeave","init","destroy","cancelAnimationFrame","removeEventListener","chartExample","getElementById"],"mappings":";AA6WC,aA7WM,SAASA,IACL,MACH,CACIC,QAAS,CACL,CACI,IACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,QACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,SACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,SACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,SACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,YAEJ,CACI,KACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,IACA,GACA,GACA,GACA,GACA,IACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,IACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IAEJ,CACI,KACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,KAGRC,MAAO,CACHC,GAAI,OACJC,GAAI,OACJC,EAAG,KAEPC,MAAO,CACHH,GAAI,KACJC,GAAI,MAERG,OAAQ,CACJJ,GAAI,UACJC,GAAI,YAInB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA;;AC/QD,aAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,MAAA,EAAA,KAAA,oBAAA,QAAA,EAAA,OAAA,WAAA,EAAA,cAAA,GAAA,MAAA,EAAA,CAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,IAAA,IAAA,EAAA,EAAA,KAAA,KAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,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","file":"app.0ba1c90d.js","sourceRoot":"..\\src","sourcesContent":["export function getChartData() {\r\n    return [\r\n        {\r\n            columns: [\r\n                [\r\n                    'x',\r\n                    1542412800000,\r\n                    1542499200000,\r\n                    1542585600000,\r\n                    1542672000000,\r\n                    1542758400000,\r\n                    1542844800000,\r\n                    1542931200000,\r\n                    1543017600000,\r\n                    1543104000000,\r\n                    1543190400000,\r\n                    1543276800000,\r\n                    1543363200000,\r\n                    1543449600000,\r\n                    1543536000000,\r\n                    1543622400000,\r\n                    1543708800000,\r\n                    1543795200000,\r\n                    1543881600000,\r\n                    1543968000000,\r\n                    1544054400000,\r\n                    1544140800000,\r\n                    1544227200000,\r\n                    1544313600000,\r\n                    1544400000000,\r\n                    1544486400000,\r\n                    1544572800000,\r\n                    1544659200000,\r\n                    1544745600000,\r\n                    1544832000000,\r\n                    1544918400000,\r\n                    1545004800000,\r\n                    1545091200000,\r\n                    1545177600000,\r\n                    1545264000000,\r\n                    1545350400000,\r\n                    1545436800000,\r\n                    1545523200000,\r\n                    1545609600000,\r\n                    1545696000000,\r\n                    1545782400000,\r\n                    1545868800000,\r\n                    1545955200000,\r\n                    1546041600000,\r\n                    1546128000000,\r\n                    1546214400000,\r\n                    1546300800000,\r\n                    1546387200000,\r\n                    1546473600000,\r\n                    1546560000000,\r\n                    1546646400000,\r\n                    1546732800000,\r\n                    1546819200000,\r\n                    1546905600000,\r\n                    1546992000000,\r\n                    1547078400000,\r\n                    1547164800000,\r\n                    1547251200000,\r\n                    1547337600000,\r\n                    1547424000000,\r\n                    1547510400000,\r\n                    1547596800000,\r\n                    1547683200000,\r\n                    1547769600000,\r\n                    1547856000000,\r\n                    1547942400000,\r\n                    1548028800000,\r\n                    1548115200000,\r\n                    1548201600000,\r\n                    1548288000000,\r\n                    1548374400000,\r\n                    1548460800000,\r\n                    1548547200000,\r\n                    1548633600000,\r\n                    1548720000000,\r\n                    1548806400000,\r\n                    1548892800000,\r\n                    1548979200000,\r\n                    1549065600000,\r\n                    1549152000000,\r\n                    1549238400000,\r\n                    1549324800000,\r\n                    1549411200000,\r\n                    1549497600000,\r\n                    1549584000000,\r\n                    1549670400000,\r\n                    1549756800000,\r\n                    1549843200000,\r\n                    1549929600000,\r\n                    1550016000000,\r\n                    1550102400000,\r\n                    1550188800000,\r\n                    1550275200000,\r\n                    1550361600000,\r\n                    1550448000000,\r\n                    1550534400000,\r\n                    1550620800000,\r\n                    1550707200000,\r\n                    1550793600000,\r\n                    1550880000000,\r\n                    1550966400000,\r\n                    1551052800000,\r\n                    1551139200000,\r\n                    1551225600000,\r\n                    1551312000000,\r\n                    1551398400000,\r\n                    1551484800000,\r\n                    1551571200000,\r\n                    1551657600000,\r\n                    1551744000000,\r\n                    1551830400000,\r\n                    1551916800000,\r\n                    1552003200000,\r\n                ],\r\n                [\r\n                    'y0',\r\n                    37,\r\n                    20,\r\n                    32,\r\n                    39,\r\n                    32,\r\n                    35,\r\n                    19,\r\n                    65,\r\n                    36,\r\n                    62,\r\n                    113,\r\n                    69,\r\n                    120,\r\n                    60,\r\n                    51,\r\n                    49,\r\n                    71,\r\n                    122,\r\n                    149,\r\n                    69,\r\n                    57,\r\n                    21,\r\n                    33,\r\n                    55,\r\n                    92,\r\n                    62,\r\n                    47,\r\n                    50,\r\n                    56,\r\n                    116,\r\n                    63,\r\n                    60,\r\n                    55,\r\n                    65,\r\n                    76,\r\n                    33,\r\n                    45,\r\n                    64,\r\n                    54,\r\n                    81,\r\n                    180,\r\n                    123,\r\n                    106,\r\n                    37,\r\n                    60,\r\n                    70,\r\n                    46,\r\n                    68,\r\n                    46,\r\n                    51,\r\n                    33,\r\n                    57,\r\n                    75,\r\n                    70,\r\n                    95,\r\n                    70,\r\n                    50,\r\n                    68,\r\n                    63,\r\n                    66,\r\n                    53,\r\n                    38,\r\n                    52,\r\n                    109,\r\n                    121,\r\n                    53,\r\n                    36,\r\n                    71,\r\n                    96,\r\n                    55,\r\n                    58,\r\n                    29,\r\n                    31,\r\n                    55,\r\n                    52,\r\n                    44,\r\n                    126,\r\n                    191,\r\n                    73,\r\n                    87,\r\n                    255,\r\n                    278,\r\n                    219,\r\n                    170,\r\n                    129,\r\n                    125,\r\n                    126,\r\n                    84,\r\n                    65,\r\n                    53,\r\n                    154,\r\n                    57,\r\n                    71,\r\n                    64,\r\n                    75,\r\n                    72,\r\n                    39,\r\n                    47,\r\n                    52,\r\n                    73,\r\n                    89,\r\n                    156,\r\n                    86,\r\n                    105,\r\n                    88,\r\n                    45,\r\n                    33,\r\n                    56,\r\n                    142,\r\n                    124,\r\n                    114,\r\n                    64,\r\n                ],\r\n                [\r\n                    'y1',\r\n                    22,\r\n                    12,\r\n                    30,\r\n                    40,\r\n                    33,\r\n                    23,\r\n                    18,\r\n                    41,\r\n                    45,\r\n                    69,\r\n                    57,\r\n                    61,\r\n                    70,\r\n                    47,\r\n                    31,\r\n                    34,\r\n                    40,\r\n                    55,\r\n                    27,\r\n                    57,\r\n                    48,\r\n                    32,\r\n                    40,\r\n                    49,\r\n                    54,\r\n                    49,\r\n                    34,\r\n                    51,\r\n                    51,\r\n                    51,\r\n                    66,\r\n                    51,\r\n                    94,\r\n                    60,\r\n                    64,\r\n                    28,\r\n                    44,\r\n                    96,\r\n                    49,\r\n                    73,\r\n                    30,\r\n                    88,\r\n                    63,\r\n                    42,\r\n                    56,\r\n                    67,\r\n                    52,\r\n                    67,\r\n                    35,\r\n                    61,\r\n                    40,\r\n                    55,\r\n                    63,\r\n                    61,\r\n                    105,\r\n                    59,\r\n                    51,\r\n                    76,\r\n                    63,\r\n                    57,\r\n                    47,\r\n                    56,\r\n                    51,\r\n                    98,\r\n                    103,\r\n                    62,\r\n                    54,\r\n                    104,\r\n                    48,\r\n                    41,\r\n                    41,\r\n                    37,\r\n                    30,\r\n                    28,\r\n                    26,\r\n                    37,\r\n                    65,\r\n                    86,\r\n                    70,\r\n                    81,\r\n                    54,\r\n                    74,\r\n                    70,\r\n                    50,\r\n                    74,\r\n                    79,\r\n                    85,\r\n                    62,\r\n                    36,\r\n                    46,\r\n                    68,\r\n                    43,\r\n                    66,\r\n                    50,\r\n                    28,\r\n                    66,\r\n                    39,\r\n                    23,\r\n                    63,\r\n                    74,\r\n                    83,\r\n                    66,\r\n                    40,\r\n                    60,\r\n                    29,\r\n                    36,\r\n                    27,\r\n                    54,\r\n                    89,\r\n                    50,\r\n                    73,\r\n                    52,\r\n                ],\r\n            ],\r\n            types: {\r\n                y0: 'line',\r\n                y1: 'line',\r\n                x: 'x',\r\n            },\r\n            names: {\r\n                y0: '#0',\r\n                y1: '#1',\r\n            },\r\n            colors: {\r\n                y0: '#3dc23f',\r\n                y1: '#F34C44',\r\n            },\r\n        },\r\n    ][0]\r\n}","function computeYRatio(height, max, min) {\r\n    return (max - min) / height\r\n}\r\n\r\nfunction computeXRatio(width, length) {\r\n    return width / (length - 2)\r\n}\r\nexport function toDate(timestamp, withDay) {\r\n    const shortMonths= [\r\n        'Jan',\r\n        'Feb',\r\n        'Mar',\r\n        'Apr',\r\n        'May',\r\n        'Jun',\r\n        'Jul',\r\n        'Aug',\r\n        'Sep',\r\n        'Oct',\r\n        'Nov',\r\n        'Dec'\r\n    ]\r\n    const shortDays= [\r\n        'Sun',\r\n        'Mon',\r\n        'Tue',\r\n        'Web',\r\n        'Thu',\r\n        'Fri',\r\n        'Sat'\r\n    ]\r\n    const date = new Date(timestamp)\r\n    if (withDay) {\r\n        return `${shortDays[date.getDay()]}, \r\n        ${shortMonths[date.getMonth()]} ${date.getDate()}`\r\n    }\r\n    return `${shortMonths[date.getMonth()]} ${date.getDate()}`\r\n}\r\n\r\nfunction isOver(mouse, x, length, dWidth) {\r\n    if (!mouse) return false\r\n    const width = dWidth / length\r\n    console.log('isOver')\r\n    return Math.abs(x - mouse.x) < width / 3\r\n}\r\n\r\nfunction line(ctx, coords, {color}) {\r\n    ctx.beginPath()\r\n    ctx.lineWidth = 4\r\n    ctx.strokeStyle = color\r\n    for (const [x, y] of coords) {\r\n        ctx.lineTo(x, y)\r\n    }\r\n    ctx.stroke()\r\n    ctx.closePath()\r\n}\r\n\r\nfunction circle(ctx, [x, y], radius, color) {\r\n    ctx.beginPath()\r\n    ctx.strokeStyle = color\r\n    ctx.fillStyle = '#fff'\r\n    ctx.arc(x, y, radius, 0, Math.PI * 2)\r\n    ctx.fill()\r\n    ctx.stroke()\r\n    ctx.closePath()\r\n}\r\n\r\nfunction boundaries({columns, types}) {\r\n    let min, max\r\n    columns.forEach(col => {\r\n        if (types[col[0]] !== 'line') return\r\n\r\n        if (typeof min !== 'number') min = col[1]\r\n        if (typeof max !== 'number') max = col[1]\r\n\r\n        for (let i = 1; i < col.length; i++) {\r\n            if (min > col[i]) min = col[i]\r\n            if (max < col[i]) max = col[i]\r\n        }\r\n    })\r\n    return [min, max]\r\n}\r\n\r\nfunction toCoords(xRatio, yRatio, DPI_HEIGHT, PADDING, yMin) {\r\n    return (col) => col.map((y, i) => [\r\n        Math.floor((i - 1) * xRatio),\r\n        Math.floor(DPI_HEIGHT - PADDING - (y - yMin) / yRatio)\r\n    ]).filter((_, i) => i !== 0)\r\n}\r\n\r\nfunction css(el, styles = {}) {\r\n    Object.assign(el.style, styles)\r\n}\r\n\r\nmodule.exports = {computeXRatio, computeYRatio, toDate, isOver, line, circle, boundaries, toCoords, css}","import {css} from './utils'\r\n\r\nconst template = data => `\r\n    <div class = \"tooltip-title\">${data.title}</div>\r\n    <ul class=\"tooltip-list\">\r\n    ${data.items.map(item => `\r\n        <li class = \"tooltip-list-item\">\r\n            <div class=\"value\" style=\"color: ${item.color}\">${item.value}</div>\r\n            <div class=\"name\" style=\"color: ${item.color}\">${item.name}</div>\r\n        </li>   \r\n     `).join('\\n')}\r\n    </ul>\r\n`\r\n\r\nfunction tooltip(el) {\r\n    const clear = () => el.innerHTML = ''\r\n    return {\r\n        show({left, top}, data) {\r\n            clear()\r\n            const {height, width} = el.getBoundingClientRect()\r\n            css(el, {\r\n                display: 'block',\r\n                top: (top - height) + 'px',\r\n                left: (left + width / 2) + 'px'\r\n            })\r\n            el.insertAdjacentHTML('afterbegin', template(data))\r\n        },\r\n        hide() {\r\n            css(el, {display: 'none'})\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = {tooltip}","import {boundaries, computeXRatio, computeYRatio, css, line, toCoords} from \"./utils\"\r\n\r\nfunction noop() {}\r\n\r\nconst HEIGHT = 40\r\nconst DPI_HEIGHT = HEIGHT * 2\r\n\r\nexport function sliderChart(root, data, WIDTH) {\r\n    const canvas = root.querySelector('canvas')\r\n    const ctx = canvas.getContext('2d')\r\n    const DPI_WIDTH = WIDTH * 2\r\n    const MIN_WIDTH = WIDTH * 0.05\r\n    let nextFn = noop\r\n    css(canvas, {\r\n        width: WIDTH + 'px',\r\n        height: HEIGHT + 'px'\r\n    })\r\n    canvas.width = DPI_WIDTH\r\n    canvas.height = DPI_HEIGHT\r\n\r\n    const $left = root.querySelector('[data-el=\"left\"]')\r\n    const $window = root.querySelector('[data-el=\"window\"]')\r\n    const $right = root.querySelector('[data-el=\"right\"]')\r\n\r\n\r\n    function next() {\r\n        nextFn(getPosition())\r\n    }\r\n\r\n    function mouseDown(e) {\r\n        const type = e.target.dataset.type\r\n        const dimensions = {\r\n            left: parseInt($window.style.left),\r\n            right: parseInt($window.style.right),\r\n            width: parseInt($window.style.width)\r\n        }\r\n        if (type === 'window') {\r\n            const startX = e.pageX\r\n            document.onmousemove = e => {\r\n                const delta = startX - e.pageX\r\n                if (delta === 0) return\r\n                const left = dimensions.left - delta\r\n                const right = WIDTH - left - dimensions.width\r\n                setPosition(left, right)\r\n                next()\r\n            }\r\n        }\r\n        else if (type === 'left' || type === 'right') {\r\n            const startX = e.pageX\r\n            document.onmousemove = e => {\r\n                const delta = startX - e.pageX\r\n                if (delta === 0) return\r\n                if (type === 'left') {\r\n                    const left = WIDTH - (dimensions.width + delta) - dimensions.right\r\n                    const right = WIDTH - (dimensions.width + delta) - left\r\n                    setPosition(left, right)\r\n                }\r\n                else {\r\n                    const right = WIDTH - (dimensions.width - delta) - dimensions.left\r\n                    setPosition(dimensions.left, right)\r\n                }\r\n                next()\r\n            }\r\n        }\r\n    }\r\n\r\n    function mouseUp(e) {\r\n        document.onmousemove = null\r\n    }\r\n\r\n    root.addEventListener('mousedown', mouseDown)\r\n    document.addEventListener('mouseup', mouseUp)\r\n    const DEFAULT_WIDTH = WIDTH * 0.3\r\n    setPosition(0, WIDTH - DEFAULT_WIDTH)\r\n\r\n    function setPosition(left, right) {\r\n        const w = WIDTH - right - left\r\n        if (w < MIN_WIDTH) {\r\n            css($window, {\r\n                width: MIN_WIDTH + 'px'\r\n            })\r\n            return\r\n        }\r\n        if (left < 0) {\r\n            css($window, {left: '0px'})\r\n            css($left, {width: '0px'})\r\n            return\r\n        }\r\n        if (right < 0) {\r\n            css($window, {right: '0px'})\r\n            css($right, {width: '0px'})\r\n            return\r\n        }\r\n\r\n        css($window, {\r\n            width: w + 'px',\r\n            left: left + 'px',\r\n            right: right + 'px'\r\n        })\r\n\r\n        css($left, {\r\n            width: left + 'px'\r\n        })\r\n\r\n        css($right, {\r\n            width: right + 'px'\r\n        })\r\n    }\r\n\r\n    function getPosition() {\r\n        const left = parseInt($left.style.width)\r\n        const right = WIDTH - parseInt($right.style.width)\r\n\r\n        return [\r\n            (left * 100) / WIDTH, (right * 100) / WIDTH\r\n        ]\r\n    }\r\n\r\n    const [yMin, yMax] = boundaries(data)\r\n    const yRatio = computeYRatio(DPI_HEIGHT, yMax, yMin )\r\n    const xRatio = computeXRatio(DPI_WIDTH, data.columns[0].length)\r\n    const yData = data.columns.filter(col => data.types[col[0]] === 'line')\r\n\r\n    //PAINTING\r\n    yData.map(toCoords(xRatio, yRatio, DPI_HEIGHT, -5, yMin))\r\n        .forEach((coords, idx) => {\r\n            const color = data.colors[yData[idx][0]]\r\n            line(ctx, coords, {color})\r\n        })\r\n\r\n    return {\r\n        subscribe(fn) {\r\n            nextFn = fn\r\n            fn(getPosition())\r\n        }\r\n    }\r\n}","import {computeYRatio, computeXRatio, toDate, isOver, line, circle, boundaries, toCoords, css} from './utils'\r\nimport {tooltip} from \"./tooltip\"\r\nimport {sliderChart} from './slider'\r\nimport './styles.scss'\r\n\r\nconst WIDTH = 600\r\nconst HEIGHT = 200\r\nconst PADDING = 40\r\nconst DPI_WIDTH = WIDTH * 2\r\nconst DPI_HEIGHT = HEIGHT * 2\r\nconst VIEW_HEIGHT = DPI_HEIGHT - 2 * PADDING\r\nconst VIEW_WIDTH = DPI_WIDTH\r\nconst ROWS_COUNT = 5\r\nconst CIRCLE_RADIUS = 8\r\n\r\nexport function chart(root, data) {\r\n    const canvas = root.querySelector('canvas[data-el=\"main\"]')\r\n    const ctx = canvas.getContext('2d')\r\n    const tip = tooltip(root.querySelector('[data-el=\"tooltip\"]'))\r\n    const slider = sliderChart(root.querySelector('[data-el=\"slider\"]'), data, WIDTH)\r\n    let raf\r\n    console.log(data)\r\n    css(canvas, {\r\n        width: WIDTH + 'px',\r\n        height: HEIGHT + 'px'\r\n    })\r\n    canvas.width = DPI_WIDTH\r\n    canvas.height = DPI_HEIGHT\r\n\r\n    const proxy = new Proxy({}, {\r\n        set(...args) {\r\n            const result = Reflect.set(...args)\r\n            raf = requestAnimationFrame(paint)\r\n            return result\r\n        }\r\n    })\r\n\r\n    slider.subscribe(pos => {\r\n        proxy.pos = pos\r\n    })\r\n\r\n    canvas.addEventListener('mousemove', mouseMove)\r\n    canvas.addEventListener('mouseleave', mouseLeave)\r\n\r\n    function mouseMove({clientX, clientY}) {\r\n        const {left, top} = canvas.getBoundingClientRect()\r\n        proxy.mouse = {\r\n            x: (clientX - left) * 2,\r\n            tooltip: {\r\n                left: clientX - left,\r\n                top: clientY - top\r\n            }\r\n        }\r\n    }\r\n\r\n    function mouseLeave() {\r\n        proxy.mouse = null\r\n        tip.hide()\r\n    }\r\n\r\n    function clear() {\r\n        ctx.clearRect(0, 0, DPI_WIDTH, DPI_HEIGHT)\r\n    }\r\n\r\n    function paint() {\r\n        //COMPUTING\r\n        clear()\r\n        const length = data.columns[0].length\r\n        const leftIndex = Math.round(length * proxy.pos[0] / 100)\r\n        const rightIndex = Math.round(length * proxy.pos[1] / 100)\r\n\r\n        const columns = data.columns.map(col => {\r\n           const res = col.slice(leftIndex, rightIndex)\r\n            if(typeof res[0] !== 'string'){\r\n                res.unshift(col[0])\r\n            }\r\n            return res\r\n        })\r\n        console.log(columns)\r\n\r\n        const [yMin, yMax] = boundaries({columns, types: data.types})\r\n        const yRatio = computeYRatio(VIEW_HEIGHT, yMax, yMin )\r\n        const xRatio = computeXRatio(VIEW_WIDTH, columns[0].length)\r\n        const yData = columns.filter(col => data.types[col[0]] === 'line')\r\n        const xData = columns.filter(col => data.types[col[0]] !== 'line')[0]\r\n\r\n        //PAINTING\r\n        yAxis(yMin, yMax)\r\n        xAxis(xData, yData, xRatio)\r\n\r\n        yData.map(toCoords(xRatio, yRatio, DPI_HEIGHT, PADDING, yMin))\r\n            .forEach((coords, idx) => {\r\n                const color = data.colors[yData[idx][0]]\r\n                line(ctx, coords, {color})\r\n\r\n                for (const [x, y] of coords) {\r\n                    if (isOver(proxy.mouse, x, coords.length, DPI_WIDTH)) {\r\n                        circle(ctx, [x, y], CIRCLE_RADIUS, color)\r\n                    }\r\n                }\r\n            })\r\n    }\r\n\r\n    function xAxis(xData, yData, xRatio) {\r\n        const colsCount = 6\r\n        const step = Math.round(xData.length / colsCount)\r\n        ctx.beginPath()\r\n        for (let i = 1; i < xData.length; i++) {\r\n            const x = i * xRatio\r\n            if ((i - 1) % step === 0) {\r\n                const text = toDate(xData[i])\r\n                ctx.fillText(text, x, DPI_HEIGHT - 10)\r\n            }\r\n            if (isOver(proxy.mouse, x, xData.length, DPI_WIDTH)) {\r\n                ctx.save()\r\n                ctx.moveTo(x, PADDING)\r\n                ctx.lineTo(x, DPI_HEIGHT - PADDING)\r\n                ctx.restore()\r\n                tip.show(proxy.mouse.tooltip, {\r\n                    title: toDate(xData[i]),\r\n                    items: yData.map(col => ({\r\n                        color: data.colors[col[0]],\r\n                        name: data.names[col[0]],\r\n                        value: col[i + 1]\r\n                    }))\r\n                })\r\n            }\r\n        }\r\n        ctx.stroke()\r\n        ctx.closePath()\r\n    }\r\n\r\n    function yAxis(yMin, yMax) {\r\n        const step = VIEW_HEIGHT / ROWS_COUNT\r\n        const textStep = (yMax - yMin) / ROWS_COUNT\r\n\r\n        ctx.beginPath()\r\n        ctx.lineWidth = 1\r\n        ctx.strokeStyle = '#bbb'\r\n        ctx.font = 'normal 20px Helvetica,sans-serif'\r\n        ctx.fillStyle = '#96a2aa'\r\n        for (let i = 1; i <= ROWS_COUNT; i++) {\r\n            const y = step * i\r\n            const text = Math.round(yMax - textStep * i)\r\n            ctx.fillText(text.toString(), 5, y + PADDING - 10)\r\n            ctx.moveTo(0, y + PADDING)\r\n            ctx.lineTo(DPI_WIDTH, y + PADDING)\r\n        }\r\n        ctx.stroke()\r\n        ctx.closePath()\r\n    }\r\n\r\n    return {\r\n        init() {\r\n            paint()\r\n        },\r\n        destroy() {\r\n            cancelAnimationFrame(raf)\r\n            canvas.removeEventListener('mousemove')\r\n            canvas.removeEventListener('mouseleave')\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import {getChartData} from './data'\r\nimport {chart} from \"./chart\";\r\n\r\nconst chartExample = chart(document.getElementById('chart'), getChartData())\r\n\r\nchartExample.init()\r\n\r\n\r\n\r\n\r\n"]}